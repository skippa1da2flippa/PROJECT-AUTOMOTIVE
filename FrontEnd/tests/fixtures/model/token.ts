/**
 * Class that provides jwt storage and provider stubs.
 *
 * NOTE: All the stubs generated by the same instance of this stub provider
 * share the same place to store/retrieve the access token.
 */ import {JwtProvider} from "../../../src/app/core/api/jwt-auth/jwt-provider";
import {JwtStorage} from "../../../src/app/core/api/jwt-auth/jwt-storage";

export class JwtStubProvider {
    private accessToken: string;
    private refreshToken: string;

    constructor() {
        this.accessToken = '';
        this.refreshToken = ""
    }

    public getJwtStorageStub(): JwtStorage {
        const setToken = (accessToken: string, refreshToken: string = "") => {
            this.accessToken = accessToken;
            this.refreshToken = refreshToken !== "" ? refreshToken : this.refreshToken
        };
        // It's important to bind because this function will be called
        // with a different context than this instance
        setToken.bind(this);

        return {
            store: setToken,
        };
    }

    public getJwtProviderStub(): JwtProvider {
        const getToken = () => {
            return {
                refreshToken: this.refreshToken,
                accessToken: this.accessToken
            };
        };
        getToken.bind(this);

        return {
            getTokens: getToken,
        };
    }
}

/**
 * Class that provides userId storage and provider stubs.
 *
 * NOTE: All the stubs generated by the same instance of this stub provider
 * share the same place to store/retrieve the userId
 */
/**
 * export class UserIdStubProvider {
 *     private userId: string;
 *
 *     constructor() {
 *         this.userId = '';
 *     }
 *
 *     public getUserIdProviderStub(): UserIdProvider {
 *         const getUserId = (): string => {
 *             return this.userId;
 *         };
 *         getUserId.bind(this);
 *
 *         return {
 *             getUserId: getUserId,
 *         };
 *     }
 *
 *     public getUserIdStorageStub(): UserIdStorage {
 *         const storeUserId = (userId: string): void => {
 *             this.userId = userId;
 *         };
 *         storeUserId.bind(this);
 *
 *         return {
 *             store: storeUserId,
 *         };
 *     }
 * }
 * */
